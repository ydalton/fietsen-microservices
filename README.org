#+title: Cycling System Microservices Project
[[./diagram.png]]
[[https://github.com/ydalton/fietsen-microservices/actions/workflows/dockerhub.yml/badge.svg]]

This is my microservices project for Advanced Programming Topics.

** Microservices
My topic is about cyclists. The original idea was that it would be the
backbone of a [[https://en.wikipedia.org/wiki/Strava][Strava]]-like application, where a user can record a
cycle trip (at the very least the start and end location), but also
which bike was used to make this trip. The frontend contains a
rudimentary CRUD view of the data.

These are the microservices involved in this application:
| Name            | Folder in repo   | Purpose                                              |
|-----------------+------------------+------------------------------------------------------|
| Bike service    | bike-service/    | Viewing and modifying bikes.                         |
| Cyclist service | cyclist-service/ | Viewing and modifying cyclists.                      |
| Trip service    | trip-service/    | Viewing and modifying cycle trips.                   |
| API gateway     | api-gateway      | Gateway to access the above microservices            |
| Frontend        | frontend/        | Frontend to interact with the gateway/microservices. |

All the microservices and the API gateway are written in Java with
Spring Boot, and the frontend is written in React.

** Extras
- 2.1 Make a frontend for your application (also containerized)

** Authentication
The API gateway uses OAuth2.0 authentication from a Google Cloud
application. Certain endpoints (particularly the ones manipulating
data) require authentication, and if the user is not authenticated
trying to access these routes, they will get a 401 (Unauthorized)
error. In order to access these routes, the user must obtain a valid
JWT token and put it in the ~Authentication~ header of their HTTP
request.

The frontend also allows the user to log in with their Google account,
and will automatically obtain a valid token for the user when logged
in, and fill that ~Authentication~ header whenever they make a request
to a route needing authentication.

** API endpoints
These are the known API endpoints:
| Method | Endpoint     | Authentication required? |
|--------+--------------+--------------------------|
| GET    | /api/bike    |                          |
| GET    | /api/cyclist |                          |
| GET    | /api/trip    |                          |
| POST   | /api/bike    | x                        |
| PUT    | /api/bike    | x                        |
| DELETE | /api/bike    | x                        |
| DELETE | /api/cyclist | x                        |
| DELETE | /api/trip    | x                        |

** CI/CD pipeline
On every push, a GitHub Actions workflow is run, which does the work of
building and testing each Java microservice with Maven into Docker
images, as well as the frontend, and automatically push the images to
Dockerhub.

** Screenshots
#+begin_quote
*NOTE*: For the screenshots of the API routes, I have decided to use
[[https://github.com/ydalton/endpoint][Endpoint]], which is an application that I have written myself, for the
purpose of being a lightweight Postman replacement. It does not
implement all the functionality of Postman, such as request headers,
but I will implement that in the future. For now I've added a hack to
allow to interact with the authenticated routes.
#+end_quote
